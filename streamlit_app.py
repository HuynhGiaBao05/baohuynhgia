# streamlit_app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
import os

st.set_page_config(page_title="PCB Inventory Analysis", layout="wide")
st.title("üì¶ PCB Inventory ‚Äî Analysis & Prediction")

# ---------- Settings ----------
CSV_FILENAME = "pcb_inventory_with_text.csv"

# ---------- Load data ----------
@st.cache_data(ttl=300)
def load_data(path):
    if not os.path.exists(path):
        return None
    try:
        df = pd.read_csv(path)
        return df
    except Exception as e:
        st.error(f"Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file CSV: {e}")
        return None

df = load_data(CSV_FILENAME)

if df is None:
    st.warning(f"Kh√¥ng t√¨m th·∫•y file `{CSV_FILENAME}` trong th∆∞ m·ª•c l√†m vi·ªác. "
               "H√£y ch·∫Øc ch·∫Øn file ƒë·∫∑t c√πng th∆∞ m·ª•c v·ªõi `streamlit_app.py`.")
    st.stop()

# ---------- Sidebar controls ----------
st.sidebar.header("T√πy ch·ªçn")
show_raw = st.sidebar.checkbox("Hi·ªÉn th·ªã d·ªØ li·ªáu th√¥ (5 d√≤ng)", value=True)
dropna_opt = st.sidebar.checkbox("T·ª± ƒë·ªông drop c√°c d√≤ng c√≥ gi√° tr·ªã thi·∫øu", value=True)
dropdup_opt = st.sidebar.checkbox("T·ª± ƒë·ªông drop d√≤ng tr√πng l·∫∑p", value=True)
test_size = st.sidebar.slider("T·ªâ l·ªá test cho m√¥ h√¨nh", 0.05, 0.5, 0.2, 0.05)
random_state = st.sidebar.number_input("random_state (m√¥ h√¨nh)", value=42, step=1)

# ---------- Basic info / cleaning ----------
tab1, tab2, tab3, tab4 = st.tabs(["T·ªïng quan", "Ti·ªÅn x·ª≠ l√Ω", "Bi·ªÉu ƒë·ªì", "D·ª± b√°o"])

with tab1:
    st.header("üîé T·ªïng quan d·ªØ li·ªáu")
    st.write(f"**Source file:** `{CSV_FILENAME}` ‚Äî k√≠ch th∆∞·ªõc ban ƒë·∫ßu: {df.shape[0]} d√≤ng √ó {df.shape[1]} c·ªôt")
    if show_raw:
        st.dataframe(df.head())

    st.subheader("üîç Ki·ªÉu d·ªØ li·ªáu")
    st.write(df.dtypes)

    # detect numeric / text cols
    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    text_cols = df.select_dtypes(include=['object']).columns.tolist()
    st.write("üî¢ C·ªôt s·ªë:", numeric_cols)
    st.write("üî§ C·ªôt vƒÉn b·∫£n:", text_cols)

with tab2:
    st.header("üßπ Ti·ªÅn x·ª≠ l√Ω v√† chu·∫©n ho√°")
    df_clean = df.copy()

    # show null counts
    st.subheader("üìå Gi√° tr·ªã thi·∫øu theo c·ªôt (tr∆∞·ªõc x·ª≠ l√Ω)")
    st.write(df_clean.isnull().sum())

    # dropna option
    if dropna_opt:
        before = df_clean.shape[0]
        df_clean = df_clean.dropna()
        st.write(f"‚úÖ ƒê√£ drop {before - df_clean.shape[0]} d√≤ng c√≥ gi√° tr·ªã thi·∫øu.")

    # drop duplicates
    if dropdup_opt:
        before = df_clean.shape[0]
        df_clean = df_clean.drop_duplicates()
        st.write(f"‚úÖ ƒê√£ drop {before - df_clean.shape[0]} d√≤ng tr√πng l·∫∑p.")

    # Normalize text columns if exist
    if 'Shift' in df_clean.columns:
        df_clean['Shift'] = df_clean['Shift'].astype(str).str.strip().str.title()
    if 'Product_Type' in df_clean.columns:
        df_clean['Product_Type'] = df_clean['Product_Type'].astype(str).str.strip().str.upper()

    # Parse Week column (t·ª± ƒë·ªông ph√°t hi·ªán t√™n 'Week' ho·∫∑c 'Date')
    date_col = None
    for candidate in ['Week', 'Date', 'Datetime', 'Time']:
        if candidate in df_clean.columns:
            date_col = candidate
            break

    if date_col:
        st.write(f"‚è±Ô∏è D√πng c·ªôt th·ªùi gian: `{date_col}` ‚Äî chuy·ªÉn sang datetime")
        df_clean[date_col] = pd.to_datetime(df_clean[date_col], errors='coerce')
        before = df_clean.shape[0]
        df_clean = df_clean.dropna(subset=[date_col])
        st.write(f"‚úÖ ƒê√£ lo·∫°i {before - df_clean.shape[0]} d√≤ng do l·ªói ng√†y th√°ng (kh√¥ng parse ƒë∆∞·ª£c).")
        df_clean = df_clean.set_index(date_col)
    else:
        st.info("Kh√¥ng t√¨m th·∫•y c·ªôt th·ªùi gian ti√™u chu·∫©n ('Week', 'Date', 'Datetime', 'Time'). N·∫øu c√≥ c·ªôt th·ªùi gian kh√°c, ƒë·ªïi t√™n th√†nh 'Week' ho·∫∑c 'Date' ƒë·ªÉ k√≠ch ho·∫°t ph√¢n t√≠ch theo th·ªùi gian.")

    st.subheader("üìå Ki·ªÉu d·ªØ li·ªáu sau ti·ªÅn x·ª≠ l√Ω")
    st.write(df_clean.dtypes)
    st.session_state['df_clean'] = df_clean  # l∆∞u t·∫°m ƒë·ªÉ tab kh√°c d√πng
    st.success("Ti·ªÅn x·ª≠ l√Ω ho√†n t·∫•t ‚Äî chuy·ªÉn sang tab 'Bi·ªÉu ƒë·ªì' ho·∫∑c 'D·ª± b√°o'.")

with tab3:
    st.header("üìä Visualizations")
    df_vis = st.session_state.get('df_clean', df.copy())

    # show counts
    st.subheader("üî§ T·∫ßn su·∫•t ca / lo·∫°i s·∫£n ph·∫©m")
    cols = st.columns(2)
    if 'Shift' in df_vis.columns:
        fig1, ax1 = plt.subplots(figsize=(6, 3))
        sns.countplot(data=df_vis.reset_index(), x='Shift', order=df_vis['Shift'].value_counts().index, ax=ax1)
        ax1.set_title("Ph√¢n b·ªë theo Shift")
        cols[0].pyplot(fig1)
    else:
        cols[0].info("Kh√¥ng c√≥ c·ªôt 'Shift' ƒë·ªÉ v·∫Ω.")

    if 'Product_Type' in df_vis.columns:
        fig2, ax2 = plt.subplots(figsize=(6, 3))
        sns.countplot(data=df_vis.reset_index(), x='Product_Type', order=df_vis['Product_Type'].value_counts().index, ax=ax2)
        ax2.set_title("Ph√¢n b·ªë theo Product_Type")
        cols[1].pyplot(fig2)
    else:
        cols[1].info("Kh√¥ng c√≥ c·ªôt 'Product_Type' ƒë·ªÉ v·∫Ω.")

    # boxplot inventory by shift
    if 'Inventory' in df_vis.columns and 'Shift' in df_vis.columns:
        st.subheader("üì¶ T·ªìn kho theo ca (Boxplot)")
        fig3, ax3 = plt.subplots(figsize=(8, 4))
        sns.boxplot(data=df_vis.reset_index(), x='Shift', y='Inventory', ax=ax3)
        ax3.set_xlabel('Shift')
        ax3.set_ylabel('Inventory')
        st.pyplot(fig3)

    # stacked bar Import/Export by product type
    if {'Import_Qty', 'Export_Qty', 'Product_Type'}.issubset(df_vis.columns):
        st.subheader("üì•/üì§ T·ªïng Nh·∫≠p - Xu·∫•t theo lo·∫°i s·∫£n ph·∫©m")
        grouped = df_vis.groupby('Product_Type')[['Import_Qty', 'Export_Qty']].sum().sort_values('Import_Qty', ascending=False)
        st.dataframe(grouped)
        fig4 = grouped.plot(kind='bar', figsize=(8,4)).get_figure()
        st.pyplot(fig4)

    # time series inventory
    if df_vis.index.dtype.kind == 'M' and 'Inventory' in df_vis.columns:
        st.subheader("üìà Xu h∆∞·ªõng t·ªìn kho theo th·ªùi gian")
        fig5, ax5 = plt.subplots(figsize=(10,4))
        sns.lineplot(x=df_vis.index, y='Inventory', data=df_vis, marker='o', ax=ax5)
        ax5.set_xlabel("Date")
        ax5.set_ylabel("Inventory")
        st.pyplot(fig5)
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu th·ªùi gian h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ c·ªôt 'Inventory'.")

with tab4:
    st.header("ü§ñ D·ª± b√°o ‚Äî Linear Regression")
    df_model = st.session_state.get('df_clean', df.copy())

    # check required columns
    req_cols = {'Inventory', 'Import_Qty', 'Export_Qty'}
    if not req_cols.issubset(df_model.columns):
        st.warning(f"Thi·∫øu m·ªôt trong c√°c c·ªôt c·∫ßn thi·∫øt cho m√¥ h√¨nh: {req_cols}. Kh√¥ng th·ªÉ hu·∫•n luy·ªán.")
    else:
        # one-hot encode categorical if any
        cat_cols = [c for c in ['Shift', 'Product_Type'] if c in df_model.columns]
        df_encoded = pd.get_dummies(df_model.reset_index(), columns=cat_cols, drop_first=True)
        # ensure numeric only for X
        X = df_encoded.drop(columns=['Inventory'])
        y = df_encoded['Inventory']

        # align shapes (drop non-numeric columns if remain)
        X = X.select_dtypes(include=[np.number])

        # split
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=int(random_state))

        model = LinearRegression()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)

        rmse = np.sqrt(mean_squared_error(y_test, y_pred))
        r2 = r2_score(y_test, y_pred)

        st.subheader("K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh")
        st.write(f"üìâ RMSE: **{rmse:.4f}**")
        st.write(f"üìà R¬≤: **{r2:.4f}**")

        # show a small comparison table
        compare_df = pd.DataFrame({
            'y_true': y_test.values,
            'y_pred': np.round(y_pred, 2)
        }).reset_index(drop=True)
        st.subheader("So s√°nh m·ªôt s·ªë gi√° tr·ªã th·ª±c vs d·ª± b√°o")
        st.dataframe(compare_df.head(10))

        # Optional: show feature coefficients if features small
        if X_train.shape[1] <= 30:
            coef_df = pd.DataFrame({
                'feature': X_train.columns,
                'coefficient': model.coef_
            }).sort_values(by='coefficient', key=abs, ascending=False)
            st.subheader("Tr·ªçng s·ªë (coefficients) c·ªßa c√°c input")
            st.dataframe(coef_df)

st.sidebar.markdown("---")
st.sidebar.write("Ch·∫°y: `streamlit run streamlit_app.py`")
